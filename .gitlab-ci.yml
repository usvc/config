image: golang:1.14
stages:
  - init
  - test
  - build
  - release
  - package
  - publish

init:
  stage: init
  cache:
    key: ${CI_PROJECT_REF}_${CI_COMMIT_REF_NAME}
    paths:
      - ./vendor
  artifacts:
    expire_in: 1 day
    paths:
      - ./vendor
  before_script:
    - apt-get update && apt-get upgrade -y
    - apt-get install -y g++ git make
  script:
    - make deps

test:
  stage: test
  dependencies:
    - init
  artifacts:
    expire_in: 1 day
    paths:
      - ./c.out
  before_script:
    - apt-get update && apt-get upgrade -y
    - apt-get install -y make g++
  script:
    - make test

.build:
  before_script:
    - apt-get update && apt-get upgrade -y
    - apt-get install -y g++ git make
  script:
    - git fetch
    - GOOS=linux GOARCH=amd64 make build_production
    - GOOS=darwin GOARCH=amd64 make build_production
    - GOOS=windows GOARCH=386 BIN_EXT=.exe make build_production

test build:
  extends: .build
  stage: test
  only:
    - master

build:
  extends: .build
  stage: build
  only:
    - tags
  artifacts:
    expire_in: 1 day
    paths:
      - ./bin/*

version bump:
  stage: release
  only:
    - master
  image: usvc/semver:gitlab-latest
  before_script:
    - apk update && apk upgrade
    - apk add openssh
    - mkdir -p ~/.ssh
    - 'printf -- "${DEPLOY_KEY}" | base64 -d > ~/.ssh/id_rsa'
    - chmod 600 -R ~/.ssh/id_rsa
    - ssh-keyscan -t rsa gitlab.com >> ~/.ssh/known_hosts
  script:
    - git remote set-url origin "git@gitlab.com:${CI_PROJECT_PATH}.git"
    - git checkout master
    - git fetch
    - semver bump --git --apply
    - git push origin master --verbose --tags
  after_script:
    - rm -rf ~/.ssh/*

compress:
  stage: package
  only:
    - tags
  # allow failure because it's not necessary to always compress
  # even though that would be nice
  allow_failure: true
  dependencies:
    - build
  artifacts:
    expire_in: 1 day
    paths:
      - ./bin/*
  before_script:
    - apt-get update && apt-get upgrade -y
    - apt-get install -y make g++ upx
  script:
    - set +e
    - GOOS=linux GOARCH=amd64 make compress_production
    - GOOS=darwin GOARCH=amd64 make compress_production
    - GOOS=windows GOARCH=386 BIN_EXT=.exe make compress_production

dockerize:
  stage: package
  only:
    - tags
  services:
    - docker:19.03.1-dind
  image: docker:19.03.1
  dependencies:
    - build
  artifacts:
    expire_in: 1 day
    paths:
      - ./build/*
  before_script:
    - apk add git jq make
    - |
      curl -LO "https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64" \
        && chmod +x container-structure-test-linux-amd64 \
        && mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
  script:
    - make image test_image
    - make save

dockerhub:
  stage: publish
  only:
    - tags
  services:
    - docker:19.03.1-dind
  image: docker:19.03.1
  dependencies:
    - dockerize
  before_script:
    - apk add git jq make
    - docker login ${DOCKER_REGISTRY_URL:-docker.io} -u ${DOCKER_REGISTRY_USERNAME} -p ${DOCKER_REGISTRY_PASSWORD}
  script:
    - make load
    - make dockerhub
  after_script:
    - docker logout
    - rm -rf ~/.docker/config.json
